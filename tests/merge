# Copyright (C) 2009 Free Software Foundation, Inc.
#
# Copying and distribution of this file, with or without modification,
# in any medium, are permitted without royalty provided the copyright
# notice and this notice are preserved.

# Test the --reject-format=FORMAT option

. $srcdir/test-lib.sh

require_cat
require_diff
use_local_patch
use_tmpdir

# ==============================================================

if ! patch --merge </dev/null 2>/dev/null ; then
    echo "Merge support DISABLED; skipping this test"
    exit
fi

# ==============================================================

cat > f.diff <<EOF
--- a/f
+++ b/f
@@ -2 +2 @@
-one
+two
EOF

echo one > f

check 'patch -p1 -m < f.diff' <<EOF
patching file f
Hunk #1 merged at 1 (offset -1 lines).
EOF

# ==============================================================

x() {
    body=`seq 1 $1`
    shift
    echo "$body" > a
    echo "$body" > b
    echo "$body" > c
    {	while test $# -gt 0 -a "$1" != -- ; do
	    echo "$1"
	    shift
	done
	echo w
	echo q
    } > b.ed
    ed b < b.ed > /dev/null 2> /dev/null
    shift
    {	while test $# -gt 0 ; do
	    echo "$1"
	    shift
	done
	echo w
	echo q
    } > c.ed
    ed c < c.ed > /dev/null 2> /dev/null
    output=`diff -u a b | patch $ARGS -f -m c`
    status=$?
    echo "$output" | sed -e '1d'
    cat c
    test $status == 0 || echo "Status: $status"
}

# ==============================================================

check 'x 3' <<EOF
1
2
3
EOF

check 'x 3  2d' <<EOF
Hunk #1 merged at 2.
1
3
EOF

check 'x 2  2i b .' <<EOF
Hunk #1 merged at 2.
1
b
2
EOF

check 'x 3  2i b . -- 3i c .' <<EOF
Hunk #1 merged at 2.
1
b
2
c
3
EOF

# ==============================================================

check 'x 3  2c 2b . -- 2c 2c .' <<EOF
Hunk #1 UNMERGED at 2-6.
1
<<<<<<<
2c
=======
2b
>>>>>>>
3
Status: 1
EOF

check 'x 3  2d -- 2d' <<EOF
Hunk #1 already applied at 2.
1
3
EOF

check 'x 2  2i bc . -- 2i bc .' <<EOF
Hunk #1 already applied at 2.
1
bc
2
EOF

check 'x 4  2a a a . -- 2a a a .' <<EOF
Hunk #1 already applied at 3-4.
1
2
a
a
3
4
EOF

# ==============================================================

check 'x 4  2d -- 3d' <<EOF
Hunk #1 UNMERGED at 2-6.
1
<<<<<<<
2
=======
3
>>>>>>>
4
Status: 1
EOF

check 'x 4  3d -- 2d' <<EOF
Hunk #1 UNMERGED at 2-6.
1
<<<<<<<
3
=======
2
>>>>>>>
4
Status: 1
EOF

# ==============================================================

check 'x 3  3i b . -- 2d' <<EOF
Hunk #1 UNMERGED at 2-6.
1
<<<<<<<
=======
2
b
>>>>>>>
3
Status: 1
EOF

check 'x 3  2d -- 3i b .' <<EOF
Hunk #1 UNMERGED at 2-6.
1
<<<<<<<
2
b
=======
>>>>>>>
3
Status: 1
EOF

# ==============================================================

check 'x 1  1c b . -- 1c c .' <<EOF
Hunk #1 UNMERGED at 1-4.
<<<<<<<
=======
b
>>>>>>>
c
Status: 1
EOF

check 'x 4  2,3c a b . -- 2,3c a c .' <<EOF
Hunk #1 UNMERGED at 3-7.
1
a
<<<<<<<
c
=======
b
>>>>>>>
4
Status: 1
EOF

check 'x 5  3c b3 b4 . -- 3c c3 c4 .' <<EOF
Hunk #1 UNMERGED at 3-9.
1
2
<<<<<<<
c3
c4
=======
b3
b4
>>>>>>>
4
5
Status: 1
EOF

check 'x 4  2,3c b a . -- 2,3c c a .' <<EOF
Hunk #1 UNMERGED at 2-6.
1
<<<<<<<
c
=======
b
>>>>>>>
a
4
Status: 1
EOF

check 'x 3  2i b . 4i b . -- 2i c .' <<EOF
Hunk #1 UNMERGED at 2-6, merged at 8.
1
<<<<<<<
c
=======
b
>>>>>>>
2
b
3
Status: 1
EOF

check 'x 3  2i b . 4i b b . -- 2i c .' <<EOF
Hunk #1 UNMERGED at 2-6, merged at 8-9.
1
<<<<<<<
c
=======
b
>>>>>>>
2
b
b
3
Status: 1
EOF

check 'x 9  4,6c a b a . -- 4,6c a c a .' <<EOF
Hunk #1 UNMERGED at 5-9.
1
2
3
a
<<<<<<<
c
=======
b
>>>>>>>
a
7
8
9
Status: 1
EOF

check 'x 3 2i b . 4i b .' <<EOF
Hunk #1 merged at 2,4.
1
b
2
b
3
EOF
